# Generated by Django 4.2.23 on 2025-10-24 02:35

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=150, unique=True)),
                ('nombre', models.CharField(max_length=100)),
                ('fecha_registro', models.DateTimeField(auto_now_add=True)),
                ('fecha_ultimo_login', models.DateTimeField(auto_now=True)),
                ('es_administrador', models.BooleanField(default=False)),
                ('activo', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='usuario_set', related_query_name='usuario', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='usuario_set', related_query_name='usuario', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
            },
        ),
        migrations.CreateModel(
            name='Categoria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True)),
                ('descripcion', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Categoría',
                'verbose_name_plural': 'Categorías',
            },
        ),
        migrations.CreateModel(
            name='Libro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=255)),
                ('autor', models.CharField(max_length=255)),
                ('isbn', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('sinopsis', models.TextField(blank=True, null=True)),
                ('numero_paginas', models.PositiveIntegerField()),
                ('tiempo_lectura_promedio', models.PositiveIntegerField(help_text='Tiempo promedio de lectura en minutos')),
                ('fecha_publicacion', models.DateField(blank=True, null=True)),
                ('editorial', models.CharField(blank=True, max_length=100, null=True)),
                ('activo', models.BooleanField(default=True)),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Libros',
            },
        ),
        migrations.CreateModel(
            name='LibroCategoria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_agregado', models.DateTimeField(auto_now_add=True)),
                ('categoria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sril.categoria')),
                ('libro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sril.libro')),
            ],
            options={
                'verbose_name': 'Libro por Categoría',
                'verbose_name_plural': 'Libros por Categoría',
                'db_table': 'biblioteca_libro_categorias',
                'unique_together': {('libro', 'categoria')},
            },
        ),
        migrations.AddField(
            model_name='libro',
            name='categorias',
            field=models.ManyToManyField(through='sril.LibroCategoria', to='sril.categoria'),
        ),
        migrations.CreateModel(
            name='HistorialLectura',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_inicio', models.DateTimeField(auto_now_add=True)),
                ('fecha_fin', models.DateTimeField(blank=True, null=True)),
                ('estado', models.CharField(choices=[('POR_LEER', 'Por leer'), ('LEYENDO', 'Leyendo'), ('TERMINADO', 'Terminado'), ('ABANDONADO', 'Abandonado')], default='POR_LEER', max_length=20)),
                ('paginas_leidas', models.PositiveIntegerField(default=0)),
                ('libro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historial_lectura', to='sril.libro')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historial_lectura', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Historial de Lectura',
                'verbose_name_plural': 'Historiales de Lectura',
            },
        ),
        migrations.CreateModel(
            name='Puntuacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('puntuacion', models.DecimalField(decimal_places=2, help_text='Puntuación de 1.0 a 5.0', max_digits=3, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(5.0)])),
                ('comentario', models.TextField(blank=True, null=True)),
                ('fecha_puntuacion', models.DateTimeField(auto_now_add=True)),
                ('libro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='puntuaciones', to='sril.libro')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='puntuaciones', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Puntuación',
                'verbose_name_plural': 'Puntuaciones',
                'unique_together': {('usuario', 'libro')},
            },
        ),
        migrations.CreateModel(
            name='PreferenciaUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nivel_interes', models.PositiveIntegerField(help_text='Nivel de interés de 1 (poco) a 5 (mucho)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True)),
                ('categoria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sril.categoria')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preferencias', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Preferencia de Usuario',
                'verbose_name_plural': 'Preferencias de Usuarios',
                'unique_together': {('usuario', 'categoria')},
            },
        ),
        migrations.AddIndex(
            model_name='libro',
            index=models.Index(fields=['titulo'], name='sril_libro_titulo_751fe7_idx'),
        ),
        migrations.AddIndex(
            model_name='libro',
            index=models.Index(fields=['autor'], name='sril_libro_autor_e53e3d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='historiallectura',
            unique_together={('usuario', 'libro')},
        ),
    ]
